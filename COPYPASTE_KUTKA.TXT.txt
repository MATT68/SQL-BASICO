
XXXXXXXXXXXXXXXXXXXXXX

SELECT COD_OPERACION, 
          TO_CHAR(FECHA_INICIO,'YYYY-MM-DD') FX_INI,
          TO_CHAR(FECHA_FIN,'YYYY-MM-DD')  AS FX_FIN_CHAR,
          DECODE(TO_CHAR(FECHA_FIN,'YYYY-MM-DD'),
                 '1999-12-31','2099-12-31',
                 '9999-12-31','2099-12-31',
                 TO_CHAR(FECHA_FIN,'YYYY-MM-DD')
                 )
          FECHA_FIN
 FROM OPERACION
 WHERE COD_OPERACION LIKE '01AV%'
 
XXXXXXXXXXXXXXXXXXXXXX
SELECT COD_OPERACION, 
          TO_CHAR(FECHA_INICIO,'YYYY-MM-DD') FX_INI,
          TO_CHAR(FECHA_INICIO + 90,'YYYY-MM-DD') FECHA_VENC_FICTI,
          TO_CHAR(FECHA_FIN,'YYYY-MM-DD')  AS FX_FIN_CHAR,
          FECHA_FIN,
          FECHA_FIN - FECHA_INICIO DIAS_ENTRE  
--          FECHA_FIN  +  INTERVAL '99-0' YEAR TO MONTH  AS FX_FIN,
--          TO_CHAR(FECHA_FIN  +  INTERVAL '99-0' YEAR TO MONTH,'YYYY-MM-DD')  AS FX_FIN_CHAR
 FROM OPERACION
 WHERE COD_OPERACION LIKE '01CNT%'
       -- AND FECHA_FIN = '31/12/99';
XXXXXXXXXXXXXXXXXXXXXXXXXXX       
SELECT COD_OPERACION, 
          TO_CHAR(FECHA_INICIO,'YYYY-MM-DD') FX_INI,
          FECHA_FIN  +  INTERVAL '99-0' YEAR TO MONTH  AS FX_FIN,
          TO_CHAR(FECHA_FIN  +  INTERVAL '99-0' YEAR TO MONTH,'YYYY-MM-DD')  AS FX_FIN_CHAR
 FROM OPERACION
 WHERE COD_OPERACION LIKE '01CNT%'
       AND FECHA_FIN = '31/12/99';
       
SELECT TO_CHAR(SYSDATE, 'DAY DD' )      || ' de '  ||
       TRIM(TO_CHAR(SYSDATE, 'MONTH' )) || ' de '  ||
       TO_CHAR(SYSDATE, 'YYYY' )
       FROM DUAL   ;
       
SELECT COD_CONTRAPARTE_FECHA ||  '-' ||
         COD_CONTRAPARTE ||  '-' ||
         COD_PAIS || '-' ||
         COD_SEGMENTO_BIS_II   as TODO_JUNTO
  FROM CONTRAPARTE
  WHERE COD_CONTRAPARTE_FECHA LIKE 'P0%' OR 
        COD_CONTRAPARTE_FECHA LIKE 'G00000000%'; 
  
SELECT COD_CONTRAPARTE_FECHA, 
         LENGTH(cod_contraparte_fecha) LONGITUD,   
           --CONTAMOS LA LONGITUD DEL CAMPO cod_contraparte_fecha
         SUBSTR(cod_contraparte_fecha,1,LENGTH(cod_contraparte_fecha)-10) CODIGO_CONTRAPARTE, 
           -- cortamos una subcadena de caracteres desde la posicion 1 hasta
           -- la longitud anterior menos 10 que es lo que ocupa la fecha
         SUBSTR(cod_contraparte_fecha,LENGTH(cod_contraparte_fecha)-9) FECHA_CONTRAPARTE,
         COD_CONTRAPARTE, 
         COD_PAIS, 
         SUBSTR(COD_PAIS,1,4) AS SOLO_PAIS,
         SUBSTR(COD_PAIS,5)      SOLO_FECHA,
         COD_SEGMENTO_BIS_II,
         NVL(TO_CHAR(FECHA_FORZAJE,'YYYY-MM-DD'),'VACIA')
  FROM CONTRAPARTE
  WHERE COD_CONTRAPARTE_FECHA LIKE 'P0%' OR 
        COD_CONTRAPARTE_FECHA LIKE 'G00000000%'; 
	
SELECT COD_CONTRAPARTE_FECHA, COD_OPERACION_FECHA, TIPO_INTERVENCION,
       NVL(COD_ENTIDAD_FECHA,'XXXX')
  FROM CONTRAPARTE_OPERACION 
  WHERE COD_CONTRAPARTE_FECHA LIKE '0002492394%';
  
  
  SELECT COD_CONTRAPARTE_FECHA, COD_CONTRAPARTE, COD_PAIS, COD_SEGMENTO_BIS_II,
         NVL(TO_CHAR(FECHA_FORZAJE,'YYYY-MM-DD'),'VACIA')
  FROM CONTRAPARTE
  WHERE COD_CONTRAPARTE_FECHA LIKE 'P0%' OR 
        COD_CONTRAPARTE_FECHA LIKE 'G000000008%'; 

------------------------------------------------------------------------------

 1FN.-  CADA ATRIBUTO DEPENDE DE LA CLAVE   /     
        CADA ATRIBUTO CONTIENE UN VALOR ATÓMICO (NO USAR VALORES COMPUESTOS)
 2FN.-  CADA ATRIBUTO DEPENDE SÓLO DE LA CLAVE
 3FN.-  CADA ATRIBUTO DEPENDE DE TODA LA CLAVE


 --- SUBCONSULTA NO CORRELACIONADA   -------------- 

 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA
  WHERE SALARIO > ( SELECT AVG(SALARIO)
                    FROM TEMPLA)

 --- SUBCONSULTA CORRELACIONADA   ------------------- 

 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA E
  WHERE SALARIO > ( SELECT AVG(SALARIO)
                    FROM TEMPLA
                    WHERE DEPT = E.DEPT )

----------  HASTA AQUI LLEGAN LOS EJEMPLOS DE KUTXA  ---------------
--------------------------------------------------------------------
--------------------------------------------------------------------
----    SUBCONSULTAS CON VARIAS FILAS RESULTADO -------------------

 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA E
  WHERE SALARIO > ALL/SOME/ANY ( SELECT AVG(SALARIO)
                                 FROM TEMPLA
                                 GROUP BY DEPT);

 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA E
  WHERE SALARIO > SELECT MAX(MEDIA) FROM ( SELECT AVG(SALARIO) AS MEDIA
                                          FROM TEMPLA
                                          GROUP BY DEPT));

 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA E
  WHERE SALARIO IN ( SELECT AVG(SALARIO)
                    FROM TEMPLA
                    GROUP BY DEPT);



--- CLAUSULA EXISTS 

SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO
   FROM TEMPLA E
  WHERE EXISTS ( SELECT 1
                    FROM AUMSAL
                    WHERE NUEMPL = E.NUEMPL )

-----------   SUBCONSULTA  ESCALAR -----------
 SELECT NUEMPL, NOMBRE, APELLIDO, SALARIO, ( SELECT AVG(SALARIO)
                                             FROM TEMPLA
                                             WHERE DEPT = E.DEPT )
   FROM TEMPLA E 

------------   SUBCONSULTA ANIDADA ---------------

 SELECT NUEMPL, NOMBRE, DEPT, NOMDEP
   FROM    ( SELECT E.NUEMPL, E.NOMBRE, E.DEPT, D.NOMDEP
  
             FROM  TEMPLA E  INNER JOIN TDEPTA D
    
             ON E.DEPT = D.NUMDEP 
         
    WHERE E.SALARIO > 12000 ) TABLA1 
             JOIN ( SELECT P.NUMDIREC, P.NOM_PROJECT, E.DEPT, D.NOMDEP
  
             FROM  PROJECT P  INNER JOIN TDEPTA D
    
             ON P.DEPT = D.NUMDEP  ) TABLA2
   ON TABLA1.....  = .... 
   WHERE DEPT = 'D11'

----------   EXPRESIONES DE TABLA WITH ------------
WITH 
  TAB1  AS ( SELECT E.NUEMPL, E.NOMBRE, E.DEPT, D.NOMDEP
  
             FROM  TEMPLA E  INNER JOIN TDEPTA D
    
             ON E.DEPT = D.NUMDEP 
         
    WHERE E.SALARIO > 12000 ),
 TAB2 AS  ( SELECT P.NUMDIREC, P.NOM_PROJECT, E.DEPT, D.NOMDEP
  
             FROM  PROJECT P  INNER JOIN TDEPTA D
    
             ON P.DEPT = D.NUMDEP  ) 
 SELECT ....
   FROM TAB1 JOIN TAB2
     ON ....;

--------------   UNION /  INTERSECT  ------------------------------------

   SELECT  NOMBRE,  APELLIDO, TLF_MV , E_MAIL, 'V'
      FROM VENDEDOR
          UNION ALL 
      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL, 'C'
      FROM CLIENTE;

[UNION ALL /  EXCEPT /  MINUS  /  INTERSECT ]
--------------------------------------------------

 CREATE TABLE `T_OFFICES` (
   `OFFC_ID` INT NOT NULL,
   `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
   `OFFC_CITY` VARCHAR(40) NOT NULL,
   `OFFC_DESCRIPTION` VARCHAR(100)
 );

 CREATE TABLE T_OFFICES (
   OFFC_ID 		SMALLINT 	 NOT NULL,
   OFFC_COUNTRY 	CHAR(50) 	 NOT NULL,
   OFFC_CITY 		VARCHAR(100) 	 NOT NULL,  
   OFFC_VOL_NEG_ESPER   DECIMAL(12,2)    NOT NULL,
   OFFC_DESCRIPTION 	VARCHAR(100)
 );

-- JOIN -------------------------------------
 SELECT E.EMPL_FORNAME, E.EMPL_SURNAME, O.OFFC_COUNTRY, O.OFFC_CITY
 FROM  T_EMPLOYEES E INNER JOIN T_OFFICES O
   ON E.OFFC_ID = O.OFFC_ID;




-- CAST de la media a campo DECIMAL(9,2)

SELECT DEPT, SUM(SALARIO), AVG(SALARIO), CAST(AVG(SALARIO) AS DECIMAL(9,2)) , COUNT(*), COUNT(DISTINCT SALARIO),
       STDDEV(SALARIO), VARIANCE(SALARIO)
 FROM TEMPLA 
 GROUP BY DEPT

-- Subconsula escalar:
SELECT NUEMPL, AUMENTO, (SELECT AVG(AUMENTO) FROM AUMSAL) AS MEDIA
    FROM AUMSAL

-- Empleados con más de un hijo
SELECT NUEMPL, NOMBRE, APELLIDO
 FROM TEMPLA
WHERE NUEMPL IN (
				SELECT NUEMPL
				 FROM HIJOS 
				GROUP BY NUEMPL
				HAVING COUNT(*) > 1 );
				
-- EMPLEADOS CON SALARIO MAYOR 
-- QUE LA MEDIA DEL SALARIO DE ALGUN DEPARTAMENTO.

SELECT NUEMPL, NOMBRE, SALARIO
FROM TEMPLA
 WHERE SALARIO > ANY 
		(SELECT AVG(SALARIO) 
		   FROM TEMPLA
		  GROUP BY DEPT);
 
 Ó LO PODEMOS PONER ASÍ:
 
 SELECT NUEMPL, NOMBRE, SALARIO
FROM TEMPLA
 WHERE SALARIO > 
( SELECT MIN(MEDIA) FROM 
		(SELECT AVG(SALARIO) AS MEDIA
		   FROM TEMPLA
		  GROUP BY DEPT) MIN_MED
		);
		

XXXXXXXXXXXXXXX   SIN INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXX

 CREATE TABLE CLIENTES
 ( CO_CLIENTE  INT      NOT NULL  ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   FOTO	       BLOB 4 M, 
   E_MAIL_CLI  CHAR(40) NOT NULL , 
   NOMBRE_CLI  CHAR(20) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   SEXO        CHAR(1)  NOT NULL,
   FX_ALTA     DATE     NOT NULL ,
   DS_HISTORIAL CLOB 2 M     )
 IN EGDADSIL;

 
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;

CREATE UNIQUE INDEX IX1_CONTRAPARTE 
      ON TABLE CONTRAPARTE (COD_CONTRAPARTE, FECHA_RESULTADO);


CREATE UNIQUE INDEX IX1_CLIENTES CLUSTER 
    ON CLIENTES(CO_CLIENTE ASC);

CREATE UNIQUE INDEX IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI);
 
CREATE INDEX IX2_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX3_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);

 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,     
    FX_PEDIDO   DATE NOT NULL,
    NU_CLIENTE ....
    ....
    IM_PEDIDO   DECIMAL(9,2) NOT NULL   
 );

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON PEDIDOS(NU_PEDIDO);

 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 ALTER TABLE CLIENTES
  ADD PRIMARY KEY NU_CLIENTE ;
-- SQL...W EL INDICE IX1_CLIENTES SERÁ USADO PARA LA PK.

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON LINEAS_PEDIDOS(NU_PEDIDO, NU_LINEA);

 ALTER TABLE PEDIDOS
  ADD FOREIGN KEY NU_CLIENTE
  REFERENCES CLIENTES(NU_CLIENTE);

 CREATE SEQUENCE SEQ_CLIENTES;


    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 
           
     SET v_num_cliente = :SEQ_CLIENTES.PREVVAL;
   
XXXXXXXXXX  CON INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXXXXXXX


 CREATE TABLE CLIENTES
 ( NU_CLIENTE  INT      NOT NULL ... AUTONUM ... ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   NOMBRE_CLI  CHAR(60) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   FX_ALTA     DATE     NOT NULL WITH DEFAULT SYSDATE,
   FX_BAJA     DATE,
   SEXO        CHAR(1)  ,
   E_MAIL_CLIE CHAR(20) NOT NULL,
   CONSTRAINT PK_CLIE
   PRIMARY KEY NU_CLIENTE,
   CONSTRAINT UNIQUE_EMAIL
   UNIQUE(E_MAIL_CLIE)
)
 IN EGDADSIL;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;
-- CREATE UNIQUE INDEX IX1_CLIENTES 
    ON CLIENTES(NU_CLIENTE ASC);

-- CREATE UNIQUE INDEX  IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI DESC);
 
CREATE INDEX IX3_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX4_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);


 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,   
    FX_PEDIDO   ...
    CO_CLIENTE  INT   ,
   ...,      
       CONSTRAINT FK_CLIE_PEDI       
       FOREIGN KEY CO_CLIENTE
       REFERENCES CLIENTES (NU_CLIENTE)
     [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       CONTRAINT PK_PEDIDO 
       PRIMARY KEY NU_PEDIDO
 );



 
 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 CREATE TABLE LINEAS_PEDIDO
 (  NU_PEDIDO   INT NOT NULL,
    NU_LINEA    INT NOT NULL,
    CO_PRODUCTO CHAR(8) NOT NULL, 
      ...
      ...,   
       CONSTRAINT FK_PEDI_LPED
       FOREIGN KEY NU_PEDIDO
       REFERENCES PEDIDOS
      [ON DELETE CASCADE],     <----------------- !!!!
       CONSTRAINT FK_PROD_LPED
       FOREIGN KEY CO_PRODUCTO
       REFERENCES PRODUCTOS
      [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       PRIMARY KEY (NU_PEDIDO, NU_LINEA)
 );

 CREATE TABLE DEVOLUCIONES
 (CO_DEVOLUCION    CHAR(12) NOT NULL,
  ....
  ....
  FOREING KEY (NU_PEDIDO, NU_LINEA) 
  REFERENCES LINEAS_PEDIDO 
  );

 CREATE TABLE X
 (  ... INT NOT NULL     
    ... 
   E_MAIL_CLI CHAR(50) ....
   ...,
   FOREIGN KEY E_MAIL_CLI
     REFERENCES CLIENTES (E_MAIL_CLI)
     ...
  )

  CREATE SEQUENCE SEC_PEDIDO
      START WITH 100000
      INCREMENT BY 5
      ...;



 CREATE SEQUENCE SEQ_CLIENTES;

    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 

   VBLE_ULTIMO_CLIENTE = VALUES(SEQ_CLIENTES.PREVVAL);
 
           
insert pedidos_test
 (select .... from pedidos where .....);

select .... from final_table
 (insert pedidos ....) 


  SELECT A,B,C,D
   FROM TABLA1
  UNION [ALL] / INTERSECT / MINUS-EXCEPT
  SELECT H,J,K,L
   FROM TABLA2;

 TIPOS DE DATOS
 --------------------------------------------
  (S  - Standard Funciona en todos los gestores
   O  - Oracle)

    ALFANUMÉRICOS:
      TIPO            LIMITE
     XXXXXXXXXXXXX   XXXXXXXXXXXX 
S     CHAR            255
S     VARCHAR         32KB / 64 KB.
O     VARCHAR2        4 KB.

   NUMÉRICOS
S    INT       (integer - 4 bytes)
S    SMALLINT  (integer - 2 bytes) 
S    DECIMAL(11,2)   (11 digitos numéricos de los cuales dos son decimales)
O    NUMBER(11,2)    (lo mismo pero en Oracle)     
M    NUMERIC(11,2)   (lo mismo pero en MySQL)

   FECHA-HORA-TIMESTAMP

      TIPO        CONTENIDO
    XXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX
S    DATE       YYYY-MM-DD
S    TIME       HH.MM.SS
O    DATE       YYYY-MM-DD-HH.MM.SS
M    DATETIME   YYYY-MM-DD-HH.MM.SS
S    TIMESTAMP  YYYY-MM-DD-HH.MM.SS.MMMMMM


SELECT CLIENTE, NOMBRE,APELLIDO, TIPO
FROM CLIENTES
GROUP BY ...
HAVING  AVG(IM_GASTO) > 150;

--

 SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR
  WHERE FX_CONTRAT BETWEEN '01-09-2001' AND '31-12-2001'
     AND NIF >= '15000000A'


   WHERE FX_CONTRAT >= '01-09-2001' AND
         FX_CONTRAT <= '31-12-2001'

SELECT CLIENTE, NOMBRE,
APELLIDO, TIPO
FROM CLIENTES
WHERE TIPO = 'A3'
   OR TIPO = 'A4'
   OR TIPO = 'B1';

 --- SUBCONSULTAS    --------------------

  --- SUBCONSULTAS   NO CORRELACIONADAS --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR
  WHERE COMISION >  ( SELECT AVG(SALARIO)  
                       FROM  VENDEDOR );
 

  --- SUBCONSULTAS   CORRELACIONADAS --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR V
  WHERE COMISION >  ( SELECT AVG(SALARIO)  
                       FROM  VENDEDOR 
                       WHERE COM_AUTONOMA = V.COM_AUTONOMA );

  --- SUBCONSULTAS   ESCALARES --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO, ( SELECT AVG(SALARIO)  
                                       FROM  VENDEDOR  ) SAL_MEDIO
  FROM VENDEDOR V
  WHERE .... ;


  --- QUERY ANIDADA OR NESTED QUERIES  --------------------

  SELECT APELLIDO, COUNT(*)
  FROM ( 
      SELECT  NOMBRE,  APELLIDO, TLF_MV , E_MAIL
      FROM VENDEDOR
          UNION  
      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM CLIENTE
       ) TAB_NUEVA 
  GROUP BY TAB_NUEVA.APELLIDO  ;

  
  --  AQR :  Automatic Query Rewrite

  -- FULLSELECT con los MULTISET OPERATORs

      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM VENDEDOR
    UNION  [ALL] /  MINUS-EXCEPT / INTERSECT
      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM CLIENTE
    ORDER BY APELLIDO, NOMBRE ;  






 CREATE DATABASE PRUEBA;

[ USER1 ]

 CREATE TABLE CLIENTES
   ( NU_CLIENTE    INT 		NOT NULL,
     NOMBRE        CHAR(30)     NOT NULL, 
     APELLIDO1     VARCHAR(30) 	NOT NULL, 
     APELLIDO2     VARCHAR(30)  , 
     NIF           CHAR(16)     NOT NULL WITH DEFAULT '111111111A',
     SEXO          VARCHAR(1)   NOT NULL,
     VENDEDOR	   CHAR(8)      NOT NULL,
     FOTO          BLOB(2 M),
     ...
   );


 SELECT DISTINCT VENDEDOR, SEXO
 FROM CLIENTES;
  
 V2134   H
 V2136   M
 V2134   M
 V2136   H

  SYSIBM.SYSDUMMY
  DUAL

 -- ORA12521    ...... CLIENTES.NU_CLIENTE  IS NOT DEFINED


 CREATE TABLE PROD.CLIENTES
   (...
   );


[ USER1.CLIENTES ]


[ USER5 ]
 CREATE TABLE CLIENTES
   (...
   );

[ USER5.CLIENTES ]















   SELECT ...
   FROM EMPLEADOS
   WHERE 
    ('01/01/2013' BETWEEN FX_ALTA AND FX_BAJA )
     OR 
    ('31/12/2013' BETWEEN FX_ALTA AND FX_BAJA )
      OR
    ( FX_ALTA >= '01/01/2013' AND FX_BAJA <= '31/12/2013' )

 INSERT INTO T_OFFICES
 (
  OFFC_ID,
  OFFC_COUNTRY,
  OFFC_CITY,
  OFFC_DESCRIPTION
 )
 VALUES
 (
  10, 
  'España',
  'Madrid',
  'Oficina central'
 );


CREATE TABLE `T_OFFICES` (
  `OFFC_ID` INT NOT NULL,
  `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
  `OFFC_CITY` VARCHAR(40) NOT NULL,
  `OFFC_DESCRIPTION` VARCHAR(100)
);


 CREATE TABLE  T_OFFICES  (
   OFFC_ID 		INT		NOT NULL,
   OFFC_COUNTRY 	VARCHAR(30) 	NOT NULL,
   OFFC_CITY 		VARCHAR(40) 	NOT NULL,
   OFFC_DESCRIPTION 	VARCHAR(100)
 );


000125  MATIAS    ANDRES   PEREZ   11111111H  
000126  ANA       GARCIA   

   CREATE TABLE CLIENTES
     (  NU_CLIENTE         INTEGER      NOT NULL,
	NOMBRE	           VARCHAR(50)  NOT NULL,
	APELLIDO1          VARCHAR(50)  NOT NULL,
	APELLIDO2          VARCHAR(50)  NOT NULL,
        CALLE              VARCHAR(50)  NOT NULL,
        NUMERO             SMALLINT     NOT NULL,
        NIF                VARCHAR(14)  NOT NULL,       
        ....
        SEXO  		   CHAR(1)      NOT NULL,             



 SELECT E.NUEMPL, E.NOMBRE, E.DEPART, D.NOMBRE
   FROM EMPLEADOS E JOIN DEPARTAMENTOS D
   ON E.DEPT = D.DEPT
  WHERE E.SALARIO >  12000
    AND D.NOMBRE LIKE 'D%'







 CREATE TABLE `T_OFFICES` (
   `OFFC_ID` INT NOT NULL,
   `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
    `OFFC_CITY` VARCHAR(40) NOT NULL,
   `OFFC_DESCRIPTION` VARCHAR(100)
 );

 DROP TABLE T_OFFICES;

 CREATE TABLE T_OFFICES (
   OFFC_ID 		INT 		NOT NULL,
   OFFC_COUNTRY 	CHAR(25) 	NOT NULL,
   OFFC_CITY 		VARCHAR(50) 	NOT NULL,
   OFFC_DESCRIPTION 	VARCHAR(100)
 );

CREATE TABLE REGISTROS (
   OFFC_ID 		INT 		NOT NULL,
   OFFC_COUNTRY 	CHAR(25) 	NOT NULL,
   CO_POSTAL		CHAR(5)		NOT NULL,
   APELLIDO1		CHAR(30),
   APELLIDO2		VARCHAR(30),			
   NU_HIJOS		TINYINT		NOT NULL,
   OFFC_CITY 		VARCHAR(40) 	NOT NULL,
   OFFC_DESCRIPTION 	VARCHAR(100)
 );

















  CREATE VIEW V_EMPL_DEPT
  AS 
  (SELECT E.NUEMPL, E.NOMBRE, E.DEPT, D.NOMDEP
  FROM  FORMA2.TEMPLA E  INNER JOIN FORMA2.TDEPTA D
      ON E.DEPT = D.NUMDEP 
    WHERE E.SALARIO > 12000);
CREATE MATERIALIZED VIEW VM_EMPL_DEPT
AS (
select d.DEPARTMENT_NAME, e.job_id, sum(e.salary), COUNT(*) 
 from hr.employees e left join HR.DEPARTMENTS d
  on e.DEPARTMENT_ID = d.DEPARTMENT_ID
  GROUP BY DEPTARMENT)  

 SELECT AVG(SALARIO)
   FROM EMPLOYEE
 GROUP BY DEPARTMENT


  SELECT NOMBRE, ...
  FROM EMPLEADOS E
    WHERE NU_EMPL IN (SELECT DISTINCT NUEMPL
                       FROM PROYECTOS);

  SELECT NOMBRE, ...
  FROM EMPLEADOS E JOIN (SELECT DISTINCT NUEMPL
                           FROM PROYECTOS P) 
    ON E.NU_EMPL = P.NU_EMPL ;


------------------
-- Una simple select

CREATE OR REPLACE PROCEDURE LEER_EMPLE (v_nuempl NUMBER)
IS
  v_employee_id     number;
  v_last_name       employees.last_name%TYPE;
BEGIN
    SELECT LAST_NAME
    INTO v_last_name
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = v_nuempl;
    DBMS_OUTPUT.PUT_LINE(v_last_name);
END;

BEGIN
    LEER_EMPLE(123);
END;

--------------------------------------
-- Un primer cursor
CREATE OR REPLACE PROCEDURE LEER_EMPLE_DEPT 
(v_dept DEPARTMENTS.DEPARTMENT_ID%TYPE )
IS
  v_employee_id     number;
  v_last_name       employees.last_name%TYPE;
  v_salary          employees.salary%TYPE;
  CURSOR C_EMPL_DEPT is 
  SELECT LAST_NAME, SALARY
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID = v_dept;
BEGIN
    OPEN  C_EMPL_DEPT;
    loop 
      FETCH  C_EMPL_DEPT
      INTO v_last_name, v_salary;
      exit WHEN C_EMPL_DEPT%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(v_last_name || ' cobra ' || v_salary);
    end loop;
    CLOSE  C_EMPL_DEPT;
END;

BEGIN
    LEER_EMPLE_DEPT(30);
END;

-----------------------------








  SELECT OFFC_COUNTRY, OFFC_CITY 
  FROM T_OFFICES
  WHERE OFFC_PRESUPUESTO BETWEEN 1.000.000 AND 10.000.000;

  SELECT OFFC_COUNTRY, OFFC_CITY 
  FROM T_OFFICES
  WHERE OFFC_PRESUPUESTO >=  1.000.000 
    AND OFFC_PRESUPUESTO <= 10.000.000





CREATE TABLE `T_OFFICES` (
  `OFFC_ID` INT NOT NULL,
  `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
  `OFFC_CITY` VARCHAR(40) NOT NULL,
  `OFFC_DESCRIPTION` VARCHAR(100)
);

drop table t_offices;

CREATE TABLE T_OFFICES (
  OFFC_ID 		INT		NOT NULL,
  OFFC_COUNTRY 		VARCHAR(30) 	NOT NULL,
  OFFC_CITY 		VARCHAR(50) 	NOT NULL,
  OFFC_DESCRIPTION 	VARCHAR(100),
  OFFC_USER	 	CHAR(20)        DEFAULT CURRENT_USER,
  OFFC_PGM 	 	CHAR(20)        ,
  TM_TIMESTAMP		TIMESTAMP       
);


CREATE TABLE T_EMPLEADOS (
  CO_EMPLE 		CHAR(30)	NOT NULL,
  NOMBRE  		VARCHAR(40) 	NOT NULL,
  APELLIDO1  		VARCHAR(40) 	NOT NULL,
  APELLIDO2	 	VARCHAR(30)	,
  SEXO			CHAR(1) 	NOT NULL,
  SALARIO		NUMBER(9,2)	NOT NULL,
  COMISION		NUMBER(9,2)	,
  TXT_CV		CLOB 2 M,		
  USUARIO		CHAR(10)        NOT NULL,
  TM_TIMESTAMP		TIMESTAMP	NOT NULL
      ...... 
);







 SELECT   ...
  FROM EMPLEADOS
 WHERE SUBSTR(CO_DEPT) = 'D%'
   AND COLOR_PELO = 'RUBIO'
   AND APELLIDO = 'GOMEZ'





















 SUBCONSULTA NO CORRELACIONADA 
 -------------------------------
  SELECT 
   FROM  EMPLE 
  WHERE SALARIO >  (SELECT AVG(SALARIO)
		      FROM EMPLE)

 SUBCONSULTA  CORRELACIONADA 
 -------------------------------
  SELECT 
   FROM  EMPLE E
  WHERE SALARIO > (SELECT AVG(SALARIO)
		     FROM EMPLE
		    WHERE DEPT = E.DEPT)

 SUBCONSULTA  CORRELACIONADA CON EXISTS
 --------------------------------------
  SELECT 
   FROM EMPLE E
  WHERE EXISTS (SELECT 1
		  FROM PROYECTO
		 WHERE NUEMPL = E.NUEMPL)

  PODEMOS ESCRIBRIR SUBQUERIES CASI EN CUALQUIER CLÁUSULA:
  --------------------------------------------------------
  SELECT NUEMPL, DEPT, (SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT = E.DEPT)
   FROM  EMPLE E


SELECT  ...
 FROM
  (SELECT AVG(SALARIO)
     FROM EMPLE E JOIN DEPTA D
     	ON E.DEPT = D.DEPT 
     WHERE ....)






   





SELECT E.NOMBRE, E.APELLIDO, E.DEPT, D.NOMBRE
 FROM  EMPLEADO E  INNER JOIN DEPARTAMENTOS  D
  ON   E.DEPT = D.DEPT 

WHERE SALARIO >  15000



 P229F
 P20EE

SELECT CAPS(NOMBRE), CAPS(APELLIDO1), CAPS(APELLIDO2) 
 FROM CLIENTES
 WHERE  APELLIDO1 = 'GOMEZ' AND 
        APELLIDO2 = 'NOIA'  AND 
        NOMBRE 
 
 Joan Gomez Noia
 Luis Gomez Noia
 
CREATE TABLE `T_OFFICES` (
  `OFFC_ID` INT NOT NULL,
  `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
  `OFFC_CITY` VARCHAR(40) NOT NULL,
  `OFFC_DESCRIPTION` VARCHAR(100)
);
DROP TABLE T_OFFICES;

CREATE TABLE T_OFFICES (
  OFFC_ID 		SMALLINT	NOT NULL,
  OFFC_COUNTRY 		CHAR(30) 	NOT NULL,
  OFFC_CITY 		VARCHAR(50) 	NOT NULL,
  OFFC_DESCRIPTION 	VARCHAR(100)
);


.....

ALTER TABLE T_OFFICES
CHANGE COLUMN  OFFC_CITY 
 OFFC_CITY VARCHAR(10) NOT NULL;



 SELECT E.NUEMPL, E.NOMBRE, E.CODEPT, D.NOMBRE_DEPT
 FROM  EMPLE E  LEFT OUTER JOIN TDEPTA D
    ON E.CODEPT = D.CODEPT 

 SELECT E.NUEMPL, E.NOMBRE, E.CODEPT, D.NOMBRE_DEPT
 FROM  EMPLE E  INNER JOIN TDEPTA D
    ON E.CODEPT = D.CODEPT 
 [ WHERE E.SALARIO > 12000]

 SELECT E.NUEMPL, E.NOMBRE, E.CODEPT, D.NOMBRE_DEPT
   FROM  EMPLE E, TDEPTA D
  WHERE E.CODEPT = D.CODEPT 
 [  AND E.SALARIO > 12000 ]










SELECT E.NU_EMPL, E.NOMBRE, E.CO_DEPT, D.NOMBRE
  FROM EMPLE E INNER JOIN  DEPT D
    ON E.CO_DEPT = D.CO_DEPT	
    WHERE  ...     

----

SELECT E.NU_EMPL, E.NOMBRE, E.CO_DEPT, D.NOMBRE
  FROM EMPLE E INNER JOIN  DEPT D
    ON E.CO_DEPT = D.CO_DEPT
       JOIN PROJECT P
        ON P.JF_PROY = D.NUM_DIRECTOR 
		JOIN  ACTIVIDADES A
		ON A.NU_EMPLE = E.NU_EMPLE	
    WHERE  E.SALARIO > 12000 
      
 
SELECT E.NU_EMPL, E.NOMBRE, E.CO_DEPT, D.NOMBRE
  FROM EMPLE E,  DEPT D, PROJECT P, ACTIVIDADES A
 WHERE E.CO_DEPT = D.CO_DEPT
   AND P.JF_PROY = D.NUM_DIRECTOR 
   AND A.NU_EMPLE = E.NU_EMPLE
   AND E.SALARIO > 12000


SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_CITY NOT IN ('Madrid', 'Barcelona',.....);

SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_CITY = 'Madrid'
   OR OFFC_CITY = 'Barcelona';


CREATE TABLE T_OFFICES (
  OFFC_ID 		INT 		NOT NULL,
  OFFC_COUNTRY 		VARCHAR(30) 	NOT NULL,
  OFFC_CITY 		VARCHAR(40) 	NOT NULL,
  OFFC_DESCRIPTION 	VARCHAR(100)
);














  Large OBject
  CLOB   - Character LOB   -  2 GB.  /   4  GB.
  BLOB   - Binary LOB      -  2 GB.  /   4  GB. 
 

SELECT * 
FROM CLIENTES
WHERE NU_CLIENTE = 1157;

CREATE TABLE CLIENTES
 ( NU_CLIENTE       INT          NOT NULL,
   NOMBRE 	    VARCHAR2(40) NOT NULL,
   APELLIDO1        VARCHAR2(40) NOT NULL,
   APELLIDO2        VARCHAR2(40) ,
   FX_ALTA          DATE	 NOT NULL, 
   SEXO		    CHAR(1)	 NOT NULL,
   FOTO_CLIE        BLOB (4 M)   , 
   USUARIO	    CHAR(8)      NOT NULL,
   TIME_STAMP       TIMESTAMP    NOT NULL);
 
INSERT INTO CLIENTES
 ( NU_CLIENTE,  ...)
 VALUES
 ( SEQ_CLIENTE.NEXTVAL,'MATIAS',......., CURRENT USER, CURRENT TIMESTAMP); 




INSERT INTO CLIENTES 
 ( NU_CLIENTE, NOMBRE, ......., USUARIO, TIME_STAMP)
 VALUES
 (  123415, 'PACO', ....... , CURRENT_USER, CURRENT_TIMESTAMP)
 






CREATE TABLE 'UPDATE'
   (  'COM+SAL'




VARCHAR - 32kb. 4kb.
CHAR
INT
DECIMAL(p,n)   /  NUMBER(p,n)
FLOAT ,  REAL   
DATE
TIME
TIMESTAMP
LOB- Large OBject
CLOB  -  Character LOB   - 2 Gb.  4 Gb.
BLOB  -  Binary    LOB   - 2 Gb.  4 Gb.

XML    -    XQuery


DFBD201 
XXX

BIND PACKAGE (COLDF212)
   MEMBER (COBOL10D)

---------
  COLDF212.COBOL10D
--------- 
BIND PLAN PLANCE12 
  PKLIST (COLDF212.*)






SELECT EMPL_FORNAME, EMPL_SURNAME 
FROM T_EMPLOYEES
WHERE 
  OFFC_ID > ALL (
    SELECT OFFC_ID FROM T_OFFICES WHERE OFFC_COUNTRY = 'España')
 
CREATE INDEX IX1_OFFICES 
 ON T_OFFICES (OFF_COUNTRY);


 WHERE UPPER(OFF_COUNTRY) = 'CHILE'

SELECT INITCAP(OFF_COUNTRY) 
  FROM OFFICES
 WHERE CIUDAD BETWEEN 'A' AND 'D'

SELECT INITCAP(OFF_COUNTRY) 
  FROM OFFICES
 WHERE FX_ALTA >= '01-01-2008' 
   AND FX_ALTA <= '31-12-2008'
'

CREATE TABLE CLIENTES
 (NU_CLIENTE INT   GENERATED ALWAYS AS IDENTITY
                         START WITH 10000 
                         INCREMENT BY 1 
                         CACHE 20,  
  NOMBRE     CHAR(40) ....                       
  .....
  NOMBRE         VARCHAR(120) NOT NULL,


 'Chile'

CREATE TABLE CLIENTES
 (NU_CLIENTE .....
  .....
  NOMBRE         VARCHAR(40) NOT NULL,
  APELLIDO1      VARCHAR(30) NOT NULL,
  APELLIDO2      VARCHAR(30) ,
  ....

   WHERE APELLIDO1 = 'GOMEZ' 


  NOMBRE_APELL   VARCHAR(120) NOT NULL,


   WHERE NOMBRE_APELL LIKE '%GOMEZ%' 

 LOB   - Large OBject
  CLOB -  CHARACTER LOB  -  2/4 GB.
  BLOB -  BINARY LOB     -  2/4 GB.



  SELECT OFFC_COUNTRY, OFFC_CITY 
   FROM T_OFFICES
   WHERE OFFC_CITY IN ('MADRID', 'BARCELONA');


  SELECT OFFC_COUNTRY, COALESCE(SALARIO+COMISION, SALARIO, COMISION, 0)
   FROM T_EMPLEADOS
   WHERE VOL_NEGOCIO > 500000;

  SELECT OFFC_COUNTRY, OFFC_CITY 
   FROM T_OFFICES
   WHERE VOL_NEGOCIO >= 500000 AND VOL_NEGOCIO <= 2000000; 

   SELECT OFFC_COUNTRY, OFFC_CITY 
   FROM T_OFFICES
   WHERE VOL_NEGOCIO BETWEEN 500000 AND 2000000;

   SELECT OFFC_COUNTRY, OFFC_CITY 
   FROM T_OFFICES
   WHERE OFFC_CITY BETWEEN 'BARCELONA' AND 'MADRID';


USER      :   PACO
DEF_SCHEMA:   PACO

CREATE SCHEMA TEST;

[SET DEF_SCHEMA = TEST]
USE TEST;

LOB: Large OBject

CLOB  -- CHARACTER LOBS
BLOB  -- BINARY LOBS


DROP TABLE T_OFFICES;

CREATE TABLE T_OFFICES (
  OFFC_ID		INT	       NOT NULL,
  OFFC_COUNTRY 		CHAR(30)       NOT NULL,
  OFFC_CITY 		VARCHAR(40)    NOT NULL,
  OFFC_DESCRIPTION 	VARCHAR(100)   ,
  IM_NEGOCIO_PREV	DECIMAL(16,2)  NOT NULL, 
  FX_ALTA		DATE           NOT NULL,
  PIC_RECEPTION         BLOB(4 M)      ,
  TXT_FOLLETO           CLOB(22 M)     ,
  USER			CHAR(8)        NOT NULL,
  TIMESTAMP_UPD         TIMESTAMP      NOT NULL            
);

SELECT OFFC_CITY, OFFC_DESCRIPTION 
FROM T_OFFICES
WHERE   OFFC_COUNTRY = 'España' 
    AND OFFC_DESCRIPTION LIKE '_f%';

SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_CITY NOT IN ('Madrid', 'Barcelona');

SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_ID BETWEEN 11 AND 21;

SELECT OFFC_COUNTRY, OFFC_CITY 
FROM T_OFFICES
WHERE OFFC_ID >= 11 AND
      OFFC_ID <= 21;


  SELECT 
    FROM 
   WHERE
 GROUP BY
  HAVING 
 ORDER BY ;




  AVG ,   VARIANCE,   STDDEV,   SUM  ,  MIN   , MAX  , COUNT(*)    
    COUNT(DISTINCT) 

 
SELECT ...
 FROM EMPLEADOS E
 WHERE SALARIO IN  
        ( SELECT AVG(SALARIO) 
	    FROM EMPLEADOS
          WHERE  DEPT = E.DEPT )


SELECT ....
 FROM (SELECT AVG(SALARIO) 
	 FROM EMPLEADOS
         WHERE  DEPT = E.DEPT 
         ORDER BY ... )







SELECT CODTRA,  AVG(SALARIO) -- , NOMBRE -- SUM(SALARIO) 
 
FROM TEMPLA
 
WHERE NUEMPL > '000200'
  
GROUP BY CODTRA
  
HAVING AVG(SALARIO) > 25000
  
ORDER BY 1;


CREATE SEQUENCE SEQ_CLIE;


INSERT INTO CLIENTES
         (NU_CLIENTE,NOMBRE, APELLIDO,.....
  VALUES (SEQ_CLIE.NEXVAL, 'LOBO','FEROZ',.... );

INSERT INTO PEDIDO
          (..., NU_CLIENTE,...    )
  VALUES  (,,,, SEQ_CLIE.PREVVAL ,....   );

CREATE VIEW v_employee_office 
(EMPL_ID, EMPL_FORNAME, EMPL_SURNAME, OFFC_COUNTRY, OFFC_CITY)
AS
SELECT 
  e.EMPL_ID, e.EMPL_FORNAME, e.EMPL_SURNAME, 
  o.OFFC_COUNTRY, o.OFFC_CITY
FROM T_EMPLOYEES e 
  INNER JOIN T_OFFICES o 
          ON e.OFFC_ID = o.OFFC_ID;

SELECT * FROM v_employee_office; 

UPDATE v_employee_office 
 SET ....
 WHERE....; 
 



SELECT 
  e.EMPL_ID, e.EMPL_FORNAME, e.EMPL_SURNAME, 
  o.OFFC_COUNTRY, o.OFFC_CITY
FROM T_EMPLOYEES e 
  INNER JOIN T_OFFICES o 
          ON e.OFFC_ID = o.OFFC_ID;


 SELECT NOMBRE_CLI
  FROM CLIENTES
 WHERE APELLIDO1 = 'GARCIA'
   AND APELLIDO2 = 'LOPEZ'
   AND NOMBRE    = 'JOSE';


SELECT 
FROM EMPLE E , DEPART D
WHERE  E.DEPT = (+) D.DEPT
AND SALARIO >     ]

 
SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E , DEPART D, PROJECT P, ACTIVITIES ACT
 WHERE E.CO_DEPT = D.CO_DEPT
  AND D.DIRECTOR = P.JF_PROYECTO 
  AND P.CO_PROY  = ACT.CO_PROY
  AND E.CATEGORIA = ..
  AND P.FX_INICIO >= ...

--------------------------------
   VISTAS
--------------------------------

DROP VIEW VISTA_COMPLEJA; 

CREATE VIEW VISTA_COMPLEJA AS 
(  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E JOIN DEPART D
       ON E.CO_DEPT = D.CO_DEPT 
          LEFT JOIN PROJECT P
	      ON (P.JF_PROYECTO = D.DIRECTOR )
		 JOIN ACTIVITIES ACT
                  ON P.CO_PROY  = ACT.CO_PROY ) ;
 
 
 
  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E JOIN DEPART D
       ON E.CO_DEPT = D.CO_DEPT 
          LEFT JOIN PROJECT P
	      ON (P.JF_PROYECTO = D.DIRECTOR )
		 JOIN ACTIVITIES ACT
                  ON P.CO_PROY  = ACT.CO_PROY 
   WHERE E.APELLIDO LIKE 'G%' 
    AND  P.FX_FIN_PRJ < '2016-01-01'










 SELECT *
   FROM VISTA_COMPLEJA
 WHERE  E.CATEGORIA = ..
  AND P.FX_INICIO >= ... )
--------------------------------------
USO DE LAS MQT -  VISTAS MATERIALIZADAS
--------------------------------
1.- 
CREATE MATERIALIZED VIEW my_warranty_orders
AS (SELECT w.order_id, w.line_item_id, o.order_date
	FROM warranty_orders w JOIN orders o
	ON o.order_id = o.order_id
	WHERE o.sales_rep_id = 165);

2.- SELECT *
    FROM my_warranty_orders, OTRA_TABLA
    WHERE ...

3.- SELECT w.order_id, w.line_item_id, o.order_date
	FROM warranty_orders w JOIN orders o
	ON o.order_id = o.order_id
	WHERE o.sales_rep_id = 165 AND W.DATE > ...)









-----------------------------------
   SINONIMOS     /     ALIAS
--------------------------------

  TABLA: TSTGR57.PRODUCKTIONEN

  CREATE SYNONYM PROD
      FOR TABLE TSTGR57.PRODUCKTIONEN;

  SELECT * FROM PROD;


 SELECT * 
    FROM PROD PR JOIN PEDIDOS PE
     ON  PR.CO_PRODUCKTEN = PE.CO_PRODUCTO ;

-------------------------

SELECT 
 COALESCE(E.SALARIO + E.COMISION,E.SALARIO,E.COMISION,0), D.CO_DEPT 
FROM EMPLE E RIGHT JOIN DEPART D
ON E.DEPT  = D.DEPT 
WHERE SALARIO >     

-----

-----------------------------------
  SUBCONSULTAS NO CORRELACIONADAS 
---------------------------------------------

SELECT  NOMBRE, APELLIDO
 FROM   EMPLE
 WHERE SALARIO >
             (  SELECT AVG(SALARIO) FROM EMPLE  )


-----------------------------------
  SUBCONSULTAS CORRELACIONADAS 
---------------------------------------------

SELECT  NOMBRE, APELLIDO
 FROM   EMPLE  E
 WHERE SALARIO > 
             (  SELECT AVG(SALARIO) FROM EMPLE
                 WHERE CO_DEPT = E.CO_DEPT );

SELECT  NOMBRE, APELLIDO
 FROM   EMPLE  E
 WHERE EXIST
         (  SELECT 1 FROM DEPARTMENT 
                 WHERE NUMDIREC = E.NUEMPL )

SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E, DEPART D PROJECT P,ACTIVITIES ACT
       WHERE E.CO_DEPT = D.CO_DEPT 
          AND D.DIRECTOR = P.JF_PROYECTO 
          AND P.CO_PROY  = ACT.CO_PROY 


         CURSORES  
-------------------------------------------------
V_NOMBRE   VARCHAR2(30);
V_APELLIDO VARCHAR2(30);
  
     SELECT NOMBRE, APELLIDO 
          INTO V_NOMBRE, V_APELLIDO
       FROM TEMPLA
     WHERE NUEMPL = '000100';

 ---------------

 DECLARE CURSOR K1
  FOR 
     SELECT NOMBRE, APELLIDO 
       FROM TEMPLA
     WHERE NUEMPL BETWEEN  '000100' AND '000200';
 
 OPEN CURSOR K1;
 
 FETCH CURSOR K1
           INTO :V_NOMBRE, :V_APELLIDO;

 CLOSE CURSOR K1;

---------------------------------

  FOR I IN (SELECT NOMBRE, APELLIDO 
             FROM TEMPLA
             WHERE NUEMPL BETWEEN  '000100' AND '000200')
  LOOP 

    PUT_LINE( ' NOMBRE : ' I.NOMBRE )
   ..... 

  END LOOP;

  







  SUBCONSULTAS
 ---------------------------------------------
 -- NO CORRELACIONADAS

  SELECT NU_PEDIDO, FX_PEDIDO 
   FROM PEDIDOS
   WHERE IM_PEDIDO > ALL  
        ( SELECT AVG(IM_PEDIDO)
          FROM PEDIDOS
          GROUP BY SECCION  )

 -- NO CORRELACIONADAS

  SELECT NU_PEDIDO, FX_PEDIDO 
   FROM PEDIDOS P
   WHERE IM_PEDIDO > 
        ( SELECT AVG(IM_PEDIDO) FROM PEDIDOS )

 -- CORRELACIONADAS

  SELECT NU_PEDIDO, FX_PEDIDO 
   FROM PEDIDOS P
   WHERE IM_PEDIDO > 
        ( SELECT AVG(IM_PEDIDO) 
          FROM PEDIDOS
          WHERE SECCION = P.SECCION )

 -- -- -- -- 
  SELECT NU_PEDIDO, FX_PEDIDO 
   FROM PEDIDOS P
   WHERE NOT EXISTS  
        ( SELECT CO_PRODUCTO FROM PRODUCTOS
          WHERE CO_PRODUCTO = P.CO_PRODUCTO )
 -- -- -- -- 
 


CREATE USER DISTINCT TYPE EURO
 AS DECIMAL(11,2)
 WITH COMPARISONS;

-----------------------
SELECT
 FROM
 WHERE
 GROUP BY
 HAVING
 ORDER BY
-------------------------

SELECT P.NU_CLIENTE, C.FX_ALTA, P.FX_PEDIDO 
   FROM CLIENTES C, PEDIDOS P
   WHERE P.NU_CLIENTE = C.NU_CLIENTE
   AND   C.CO_POSTAL = 

SELECT P.NU_CLIENTE, C.FX_ALTA, P.FX_PEDIDO 
   FROM CLIENTES C JOIN PEDIDOS P
   ON P.NU_CLIENTE = C.NU_CLIENTE
   WHERE    C.CO_POSTAL = 



DROP TABLE T_OFFICES;

CREATE TABLE T_OFFICES (
  OFFC_ID 		INT 	    NOT NULL,
  OFFC_COUNTRY 		VARCHAR(30) NOT NULL,
  OFFC_CITY 		VARCHAR(40) NOT NULL,
  OFFC_LOGO             BLOB(4 M),
  OFFC_PRESUPUESTO      EURO,
  OFFC_PRESUPUESTO_D    DOLAR,
  OFFC_DESCRIPTION 	VARCHAR(100)
);

ALTER TABLE T_OFFICES
   ... 
  OFFC_CITY 		VARCHAR(45) NOT NULL;


SELECT NU_CUENTA, FX_APERTURA, SA_ACTUAL
    FROM CUENTAS
    WHERE NU_CLIENTE > 30000 AND SA_ACTUAL > 200000
? Supuestos iniciales:
? El 5% de las cuentas tienen NU_CLIENTE > 30.000
? El 3% de las cuentas tienen SA_ACTUAL > 200.000

 EXPLAIN PLAN SET QUERYNO = 124
  FOR SELECT NOMBRE, APELLIDO 
       FROM TEMPLA
     WHERE NUEMPL = '0001000';


  CREATE UNIQUE INDEX IX2_CUENTAS ON CUENTAS 
        (NU_CLIENTE, NU_CUENTA,FX_ULT_MOVI);

  CREATE UNIQUE INDEX IX2 ON CUENTAS 
        (NU_CLIENTE, NU_CUENTA)
      INCLUDE (FX_ULT_MOVI);

  SELECT NU_CUENTE, FX_ULT_MOVI 
    FROM CUENTAS
  WHERE NU_CLIENTE = ...;

 DECLARE CURSOR K1 FOR  
 SELECT ...
   FROM CLIENTES C INNER PEDIDOS P
   ON  P.NU_CLIENTE = C.NU_CLIENTE
   WHERE C.CO_POSTAL = 
  ORDER BY P.NU_CLIENTE, P.FX_PEDIDO;

 DECLARE CURSOR K1 FOR  
 SELECT ...
   FROM CLIENTES C, PEDIDOS P
   WHERE P.NU_CLIENTE = C.NU_CLIENTE
   AND   C.CO_POSTAL = 
  ORDER BY P.NU_CLIENTE, P.FX_PEDIDO;

 DECLARE CURSOR K1 FOR  
 SELECT ...
   FROM CLIENTES C INNER PEDIDOS P
   ON  P.NU_CLIENTE = C.NU_CLIENTE
        INNER JOIN L_PEDIDO LP
        ON LP.NU_PEDIDO = P.NU_PEDIDO
            INNER JOIN FACTURAS F
            ON F.NU_PEDIDO = P.NU_PEDIDO
   WHERE C.CO_POSTAL = 
  ORDER BY P.NU_CLIENTE, P.FX_PEDIDO;

 DECLARE CURSOR K1 FOR  
 SELECT ...
   FROM CLIENTES C, PEDIDOS P, L_PEDIDO LP, FACTURAS F ..
   WHERE P.NU_CLIENTE = C.NU_CLIENTE
   AND   LP.NU_PEDIDO = P.NU_PEDIDO
   AND   F.NU_PEDIDO  = P.NU_PEDIDO
   AND   C.CO_POSTAL = 
  ORDER BY P.NU_CLIENTE, P.FX_PEDIDO;
 SELECT ....
   FROM PEDIDOS
  WHERE NU_CLIENTE = 
  ORDER BY FX_PEDIDO
   

 SELECT 1
   FROM EMPLEADOS
   WHERE FX_ALTA = '2016-01-02'




MATCHING INDEX SCAN 
             / BUSQUEDA INDICE
NON MATCHING INDEX SCAN
             / BARRIDO DE INDICE
INDEX ONLY

TABLE (SPACE) SCAN 
             / BARRIDO SECUENCIAL TABLA
    

SEARCHED COLUMNS (COLUMNAS DE BUSQUEDA)


DATABLOCK PREFETCHING 

SELECT EMPLE.NU_EMPL, DEPART.NOMDEPART, EMPLE.DEPT,....
FROM EMPLE, DEPART 
WHERE EMPLE.DEPT = DEPART.DEPT

SELECT E.NU_EMPL, D.NOMDEPART, E.DEPT,....
FROM EMPLE E INNER JOIN DEPART D 
ON E.DEPT = D.DEPT

SELECT 
FROM EMPLE E, DEPART D
WHERE  E.DEPT (+) = D.DEPT
[ AND   ]





CREATE TABLE T_OFFICES (
  OFFC_ID          INT 		NOT NULL,
  OFFC_COUNTRY	   VARCHAR(30)  NOT NULL,
  OFFC_CITY 	   VARCHAR(40)  NOT NULL,
  OFFC_DESCRIPTION VARCHAR(100) 
);
INSERT ...     
   ( FX_ALTA )
VALUES
    ('2016-05-19') ; -- JIS 
INSERT ...     
   ( FX_ALTA )
VALUES
    ('19-05.2016') ;
INSERT ...     
   ( FX_ALTA )
VALUES
    ('05/19/2016') ;
SELECT ...
  FROM 
  (SELECT ....
   FROM EMPLOYEES
    WHERE .....) 
  JOIN 
  (SELECT ....
   FROM EMPLOYEES JOIN DEPARTMENTS
    ON ...
    WHERE .....) 
  ON ....;

WITH E AS
  (SELECT ....
   FROM EMPLOYEES
    WHERE .....),
     ED AS 
  (SELECT ....
   FROM EMPLOYEES JOIN DEPARTMENTS
    ON ...
    WHERE .....) 
 SELECT ....
   E JOIN ED
  ON ....;

 SELECT NOMBRE,    RANK() OVER (SALARY)
   FROM EMPLOYEE
   WHERE .. 

NON-CORRELATED SUBQUERY
-----------------------
 SELECT * 
 
 FROM TEMPLA  
  
 WHERE SALARIO  >
   
   (SELECT AVG(SALARIO) 
    FROM TEMPLA)

JOIN
------------------------
 .....

CORRELATED SUBQUERY
-----------------------
 SELECT * 
 
 FROM TEMPLA E 
  
 WHERE SALARIO  >
   
    ( SELECT AVG(SALARIO) 
      FROM TEMPLA 
    
      WHERE DEPT = E.DEPT )

 SELECT * 
 
 FROM TEMPLA E 
  
 WHERE EXIST  
    ( SELECT 1 
      FROM HIJOS
    
      WHERE NUEMPL = E.NUEMPL)



Algunos ejemplos usados en el curso de SQL Básico:

SELECT OFFC_ID, ...
FROM   T_EMPLOYEES 
WHERE  APELLIDO1 LIKE '__E%';

xxxxxxxxxxxxxxxxx MAS EJERCICIOS XXXXXXXXXXXXXXXXXXXXXXXXXXXX

1.-  Mostrar el creador, la fecha y la descripción de todas las incidencias.

2.-  Mostrar las mismas columnas que antes, pero ahora sólo queremos las 
 incidencias con código issu_id mayor que 20.

3.-  Mostrar las mismas columnas que antes, pero ahora sólo queremos las 
 incidencias con código issu_id entre 10 y  40 -ambos exclusive-.

4.-  Mostrar las mismas columnas que antes, pero ahora sólo queremos las 
 incidencias con código issu_id entre 10 y  40 -ambos inclusive-.
 Ordénalas por nombre del creador.

4.5- Obtener las incidencias creadas por aquellos que el nombre empiece por
     'P'.

5.-  Mostrar ahora la version, issu_id, el summary y la descripcion de las
    issu_id 9, 19 y 29.
    Ordenadas por ispr_id y istp_id.

6.- Usando la tabla t_issues de la bd issuetk, lanzar una query para contar
   el número de filas de cada ISIM_ID. Mostrar el ISIM_ID, el número de filas
   y la suma de los ISPR_ID.

7.- Mostrar del ejercicio anterior, sólo aquellos en los que la suma sea mayor
   50.

8.- Mostrar el FORNAME, SURNAME y ciudad donde está la oficina de los empleados.

9.- Mostrar además de lo anterior, aquellos empleados que aún no estén 
   asignados a ninguna oficina.

10.- A partir del ejercicio, modificarlo para mostrar además oficinas sin
   empleados -si las hubiera-.

11.- Al ejercicio 8, añadirle ahora la columna nombre de la línea de 
    conocimiento para cada empleado.

12.-

XXXXXXXXXXX   EJERCICIOS CONTRA EMPLE, DEPT, HIJOS .... XXXXXXXXXXXX
                               TEMPLA  TDEPTA

(El bloque 0 es para gente sin conocimiento alguno de SQL)

0.1.- MOSTRAR EL NOMBRE, FECHA DE NACIMIENTO Y SALARIO DE LOS EMPLEADOS VARONES.

0.2.- MOSTRAR NOMBRE, APELLIDO Y SALARIO DE LOS EMPLEADOS CUYO APELLIDO 
      EMPIEZA POR M.

0.3.-  MOSTRAR LOS EMPLEADOS QUE GANAN MÁS DE 30000.

0.4.-  MOSTRAR LOS EMPLEADOS CONTRATADOS EN EL AÑO 2000.

1.- MOSTRAR EL NOMBRE DEL EMPLEADO JUNTO AL NOMBRE DEL HIJO.

2.- LO MISMO QUE ANTES, PERO TAMBIEN MOSTRAMOS LOS NOMBRES DE LOS 
    EMPLEADOS SIN HIJOS, INDICANDO " XXXXXXX ". 

2.1- MOSTRAR EL NOMBRE DEL EMPLEADO, EL NOMBRE DEL CONYUGE Y EL NOMBRE 
     DEL HIJO.

3.- MOSTRAR EL EMPLEADO Y EL DIA DE LA SEMANA QUE FUE CONTRATADO.

4.- MOSTRAR EL EMPLEADO, EL NOMBRE DE SU JEFE Y LOS AUMENTOS 
   SALARIALES QUE HA TENIDO. SI NO HA TENIDO NINGUNO MOSTRARLO TAMBIEN.

5.- MOSTRAR LOS EMPLEADOS CON MÁS DE UN HIJO.

6.- MOSTRAR LOS EMPLEADOS SIN HIJOS.

6.1.- EMPLEADOS CASADOS Y QUE NO TENGAN HIJOS.

7.- MOSTRAR LA MEDIA DEL SALARIO PARA CADA DEPARTAMENTO, JUNTO
   CON EL NÚMERO DE EMPLEADOS DE CADA DEPARTAMENTO.

8.- MOSTRAR EL MAXIMO , EL MINIMO, LA MEDIA, LA VARIANZA Y LA DESVIACION 
   TIPICA DEL SALARIO DE LOS EMPLEADOS PARA CADA DEPARTAMENTO

9.- MOSTRAR LOS EMPLEADOS QUE NO TIENEN CONYUGE. (PUEDES USAR EXISTS O EXCEPT)

10.- MOSTRAR LOS EMPLEADOS QUE GANAN MÁS QUE LA MEDIA DE SU DEPARTAMENTO. 
    HACERLO CON UNA JOIN SOBRE UNA SUBCONSULTA.

4.- 
SELECT E.NUEMPL, E.NOMBRE, D.NUMDEP, D.NUMDIREC, 
       
J.NOMBRE JEFE, COALESCE(A.AUMENTO, 'NO TIENE')
  
FROM TEMPLA E JOIN TDEPTA D
    
ON E.DEPT = D.NUMDEP
       
JOIN TEMPLA J 
         
ON D.NUMDIREC = J.NUEMPL
            
LEFT JOIN AUMSAL A
		    
ON A.NUEMPL = E.NUEMPL






 SELECT * 
 
 FROM TEMPLA E 
  
 WHERE SALARIO  >
   
    ( SELECT AVG(SALARIO) 
      FROM TEMPLA 
    
      WHERE DEPT = E.DEPT )

 SELECT FX_CONTRATACION, NOMBRE
 FROM TEMPLA
 WHERE FX_CONTRATACION = '2015-06-15';

 SELECT 1
 FROM TEMPLA
 WHERE FX_CONTRATACION < '2015-06-15'
 -- FETCH FIRST 1 ROW ONLY (DB2)
 -- ROWNUM < 2 (ORACLE)
 -- TOP 1      (SQL*SERVER)
 -- ??????      (MySQL);

 SELECT COUNT(*)
 FROM TEMPLA
 WHERE FX_CONTRATACION < '2015-06-15';
  
 525

ASÍ NO: 

 SELECT OFFC_COUNTRY, OFFC_CITY 
 FROM OFICINAS
 WHERE UPPER(PAIS) = 'ESPAÑA';
-- WHERE LOWER(PAIS) = 'españa';


TABLA
-- ... ----
  ESPAÑA
  FRANCIA
  ESPAÑA
  GEORGIA
  GAMBIA
  GABON
  AMBERES
  CUBA
  ...
----
 SELECT INITCAP(OFFC_COUNTRY), OFFC_CITY 
 FROM OFICINAS
 WHERE PAIS LIKE '%A%';
---
 SELECT INITCAP(OFFC_COUNTRY), OFFC_CITY 
 FROM OFICINAS
 WHERE NOMB_CALLE LIKE '%BAH%';
---
 SELECT 1
 FROM TEMPLA
 WHERE FX_CONTRATACION <= '2015-06-15'
---
 SELECT 1
 FROM TEMPLA
 WHERE FX_CONTRATACION > '2015-06-01' 
   AND FX_CONTRATACION <= '2015-06-15'  
---
 SELECT 1
 FROM TEMPLA
 WHERE FX_CONTRATACION BETWEEN '2015-06-01' AND '2015-06-15'  
---
(AUTOCOMMIT=ON)
 SET AUTOCOMMIT = OFF;
DELETE 
--SELECT *
FROM T_OFFICES 
WHERE OFFC_ID = 30;
 
 SELECT ....
COMMIT; 

 SELECT ...
 FROM CLIENTES C LEFT JOIN PEDIDO P
 ON C.NU_CLIENTE = P.NU_CLIENTE    
 WHERE C.CO_POSTAL = .... 
 ORDER BY C.NU_CLIENTE, P.FX_PEDIDO










 SELECT TEMPLA.NUEMPL, TEMPLA.CO_DEPT, TDEPTA.NOMDEPT
 FROM    TEMPLA, TDEPTA
 WHERE   TEMPLA.CO_DEPT = TDEPTA.CO_DEPT

 SELECT E.NUEMPL, E.CO_DEPT, D.NOMDEPT
 FROM    TEMPLA E, TDEPTA D
 WHERE   E.NUDEPT = D.CO_DEPT



















 SELECT OFICINA 
 FROM EMPLEADOS
 WHERE ...
 GROUP BY OFICINA;

  SELECT E.NUEMPL, E.NOMBRE, D.DEPT, D.NOMBRE
  FROM TEMPLA E INNER JOIN TDEPTA D
  ON E.DEPT = D.DEPT
  WHERE E.SALARIO > 10000
 ---
  SELECT ..
  FROM TEMPLA E LEFT OUTER JOIN TDEPTA D
       ON E.DEPT = D.DEPT
  WHERE E.SALARIO > 10000
--------------
SELECT E.EMPL_FORNAME, e.EMPL_SURNAME, o.OFFC_COUNTRY, o.OFFC_CITY
FROM 
  T_EMPLOYEES E RIGHT OUTER JOIN T_OFFICES O
       ON E.OFFC_ID = O.OFFC_ID
	WHERE E.FX_ALTA = '2016-....';
----------------------------
SELECT E.EMPL_FORNAME, e.EMPL_SURNAME, o.OFFC_COUNTRY, o.OFFC_CITY
FROM 
    T_OFFICES O  E LEFT OUTER JOINT_EMPLOYEES 
       ON E.OFFC_ID = O.OFFC_ID
       WHERE E.FX_ALTA = '2016-....';
---------
----------
   PROD.T_EMPLOYEES
   PROD.T_OFICINAS
   PROD.T_DEPARTMENTS
    ...
    ...
   TEST.T_EMPLOYEES
   TEST.T_OFICINAS
   TEST.T_DEPARTMENTS
    ...
    ...
  
----------
    SELECT ..
	FROM TEMPLA E INNER JOIN TDEPTA D
	ON E.DEPT = D.DEPT
	   LEFT JOIN PROJECT P
           ON P.JEFE_PROY = D.DIRECTOR
		JOIN TABLA T
		ON T.PRED = E.PRED
    WHERE P.FX_INICIO = 
--
    SELECT ..
	FROM TEMPLA E, TDEPTA D, PROJECT P, TABLA T
        WHERE P.JEFE_PROY = D.DIRECTOR
	  AND E.DEPT = D.DEPT
	  AND T.PRED = E.PRED
          AND P.FX_INICIO 
-----
  WHERE CO_IMPUESTO > 19
 -- WHERE SUBSTR(CO_IMPUESTO,3,2) > '19'

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   -- SUBCONSULTA NO CORRELACIONADA   -------------- 
  SELECT ....
  FROM  EMPLE E
  WHERE SALARIO > 
           (SELECT AVG(SALARIO) FROM EMPLE);

   -- SUBCONSULTA CORRELACIONADA   -------------- 

 SELECT ....
  FROM  EMPLE E
  WHERE SALARIO > 
           (SELECT AVG(SALARIO) FROM EMPLE
                   WHERE DEPT = E.DEPT);   

-- SUBCONSULTA CON EXISTS (CORRELACIONADA)   -------------- 
 
SELECT ....
  FROM  EMPLE E
  WHERE EXISTS  
           (SELECT NUMDEP FROM TDEPTA
                   WHERE NUMDIREC = E.NUEMPL);
.....
 WITH
  A AS ( SELECT * FROM EMPLE ),
  B AS ( SELECT * FROM DEPT D JOIN PROJECT P 
               ON D.DIRECTOR = P.JEFEPROY  )
  SELECT ....
   FROM A JOIN B
     ON A.KKK = B.KKK;
...............
  SELECT ....
   FROM ( SELECT * FROM EMPLE ) A JOIN 
                 ( SELECT * FROM DEPT D JOIN PROJECT P 
                            ON D.DIRECTOR = P.JEFEPROY  ) B
     ON A.KKK = B.KKK;
---------------------------
INSERT INTO TEST
  SELECT FROM EMPLE...;

SELECT NU_CLIENTE FROM FINAL_TABLE
 (INSERT INTO CLIENTES
 ()
 VALUES(...));


 
XXXXXXXXXXXXXXX   SIN INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXX

 CREATE TABLE CLIENTES
 ( CO_CLIENTE  INT      NOT NULL  ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   FOTO	       BLOB 4 M, 
   E_MAIL_CLI  CHAR(40) NOT NULL , 
   NOMBRE_CLI  CHAR(20) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   FX_ALTA     DATE     NOT NULL ,
   DS_HISTORIAL CLOB 2 M     )
 IN EGDADSIL;

 
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;

CREATE UNIQUE INDEX IX1_CLIENTES CLUSTER 
    ON CLIENTES(CO_CLIENTE ASC);

CREATE UNIQUE INDEX IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI);
 
CREATE INDEX IX2_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX3_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);

 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,     
    FX_PEDIDO   DATE NOT NULL,
    NU_CLIENTE ....
    ....
    IM_PEDIDO   DECIMAL(9,2) NOT NULL   
 );

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON PEDIDOS(NU_PEDIDO);

 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 ALTER TABLE CLIENTES
  ADD PRIMARY KEY NU_CLIENTE ;
-- SQL...W EL INDICE IX1_CLIENTES SERÁ USADO PARA LA PK.

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON LINEAS_PEDIDOS(NU_PEDIDO, NU_LINEA);

 ALTER TABLE PEDIDOS
  ADD FOREIGN KEY NU_CLIENTE
  REFERENCES CLIENTES(NU_CLIENTE);

 CREATE SEQUENCE SEQ_CLIENTES;


    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 
           
     SET v_num_cliente = :SEQ_CLIENTES.PREVVAL;
   
XXXXXXXXXX  CON INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXXXXXXX


 CREATE TABLE CLIENTES
 ( NU_CLIENTE  INT      NOT NULL ... AUTONUM ... ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   NOMBRE_CLI  CHAR(60) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   FX_ALTA     DATE     NOT NULL WITH DEFAULT SYSDATE,
   FX_BAJA     DATE,
   SEXO        CHAR(1)  ,
   E_MAIL_CLIE CHAR(20) NOT NULL,
   CONSTRAINT PK_CLIE
   PRIMARY KEY NU_CLIENTE,
   CONSTRAINT UK_CLIE_EMAIL
   UNIQUE KEY(E_MAIL_CLIE)
)
 IN EGDADSIL;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;
-- CREATE UNIQUE INDEX IX1_CLIENTES 
    ON CLIENTES(NU_CLIENTE ASC);

-- CREATE UNIQUE INDEX  IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI DESC);
 
CREATE INDEX IX3_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX4_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);


 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,   
    FX_PEDIDO   ...
    CO_CLIENTE  INT   ,
   ...,      
       CONSTRAINT FK_CLIE_PEDI       
       FOREIGN KEY CO_CLIENTE
       REFERENCES CLIENTES (NU_CLIENTE)
     [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       CONTRAINT PK_PEDIDO 
       PRIMARY KEY NU_PEDIDO
 );



 
 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 CREATE TABLE LINEAS_PEDIDO
 (  NU_PEDIDO   INT NOT NULL,
    NU_LINEA    INT NOT NULL,
    CO_PRODUCTO CHAR(8) NOT NULL, 
      ...
      ...,   
       CONSTRAINT FK_PEDI_LPED
       FOREIGN KEY NU_PEDIDO
       REFERENCES PEDIDOS
      [ON DELETE CASCADE],     <----------------- !!!!
       CONSTRAINT FK_PROD_LPED
       FOREIGN KEY CO_PRODUCTO
       REFERENCES PRODUCTOS
      [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       PRIMARY KEY (NU_PEDIDO, NU_LINEA)
 );

 CREATE TABLE DEVOLUCIONES
 (CO_DEVOLUCION    CHAR(12) NOT NULL,
  ....
  ....
  FOREING KEY (NU_PEDIDO, NU_LINEA) 
  REFERENCES LINEAS_PEDIDO 
  );

 CREATE TABLE X
 (  ... INT NOT NULL     
    ... 
   E_MAIL_CLI CHAR(50) ....
   ...,
   FOREIGN KEY E_MAIL_CLI
     REFERENCES CLIENTES (E_MAIL_CLI)
     ...
  )

  CREATE SEQUENCE SEC_PEDIDO
      START WITH 100000
      INCREMENT BY 5
      ...;



 CREATE SEQUENCE SEQ_CLIENTES;

    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 

   VBLE_ULTIMO_CLIENTE = VALUES(SEQ_CLIENTES.PREVVAL);
 
           
insert pedidos_test
 (select .... from pedidos where .....);

select .... from final_table
 (insert pedidos ....) 


  SELECT A,B,C,D
   FROM TABLA1
  UNION [ALL] / INTERSECT / MINUS-EXCEPT
  SELECT H,J,K,L
   FROM TABLA2;
 -------------   TRIGGER -------------------------------- 
  CREATE OR REPLACE TRIGGER TR1_LINEA_PEDIDOS
   AFTER INSERT INTO LINEA_PEDIDOS
    REFERENCING NEW AS L 
    BEGIN ATOMIC
      UPDATE PRODUCTOS
       SET NUM_STOCK = NUM_STOCK - 1
       WHERE CO_PRODUCTO = L.NU_PRODUCTO
     END;
 
 -------------   VISTAS -------------------------------- 
  





  -----  EJEMPLO DE SELECT (PARA USAR EN PROGRAMAS)  ---------------------

 SELECT NUEMPL, NOMBRE, APELLIDO, FECHING
 
 FROM TEMPLA
 
 INTO VB_NUEMPL, VB_NOMBRE, .... 
 
 WHERE NUEMPL BETWEEN  '000100' AND '000500';

-----  EJEMPLO DE CURSOR (PARA USAR EN PROGRAMAS)  ---------------------

  DECLARE CURSOR CUR_EMPLE
  SELECT NUEMPL, NOMBRE, APELLIDO, FECHING
 
  FROM TEMPLA
 
  WHERE NUEMPL BETWEEN  '000100' AND '000500';
  
  OPEN CURSOR CUR_EMPLE;

  WHILE CUR_EMPLE%NOT_FOUND

  FETCH CURSOR CUR_EMPLE
    INTO VB_NUEMPL, VB_NOMBRE, VB_APELLIDO, VB_FECHING;
   ..... 
   ..... 

  END WHILE;

   CLOSE CURSOR CUR_EMPLE;

  --- JOINS ---------
   SELECT E.NUEMPL, E.NOMBRE_EMPLE, E.DEPT, D.NOMBRE_DEPART
    FROM EMPLE E , DEPART D
    WHERE E.DEPT = D.DEPT 
     AND  E.NUEMPL BETWEEN '101' AND '102'
   -------------------
   SELECT E.NUEMPL, E.NOMBRE_EMPLE, E.DEPT, D.NOMBRE_DEPART
    FROM EMPLE E JOIN DEPART D
    ON E.DEPT = D.DEPT 
    WHERE E.NUEMPL BETWEEN '101' AND '102'
     

SELECT ....
  FROM 
(  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E , DEPART D, PROJECT P, ACTIVITIES ACT
 WHERE E.CO_DEPT = D.CO_DEPT
  AND D.DIRECTOR = P.JF_PROYECTO 
  AND P.CO_PROY  = ACT.CO_PROY
  AND E.CATEGORIA = ..
  AND P.FX_INICIO >= ... ) TABLA_A
JOIN 
(  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E , DEPART D
 WHERE E.CO_DEPT = D.CO_DEPT
  AND E.CATEGORIA = ..
  AND P.FX_INICIO >= ... ) TABLA_B
ON TABLA_A.CO_DEPT = TABLA_B.CO_DEPT
WHERE  ....;

WITH 
 TABLA_A AS 
 (  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E , DEPART D, PROJECT P, ACTIVITIES ACT
 WHERE E.CO_DEPT = D.CO_DEPT
  AND D.DIRECTOR = P.JF_PROYECTO 
  AND P.CO_PROY  = ACT.CO_PROY
  AND E.CATEGORIA = ..
  AND P.FX_INICIO >= ... ),
 TABLA_B
(  SELECT E.NOMBRE, E.APELLIDO, D.CO_DEPT, D.NOM_DEPT, 
      P.CO_PROJ, ACT.CO_ACT, ACT.HORAS
  FROM EMPLE E , DEPART D
 WHERE E.CO_DEPT = D.CO_DEPT
  AND E.CATEGORIA = ..
  AND P.FX_INICIO >= ... )
ON TABLA_A.CO_DEPT = TABLA_B.CO_DEPT
WHERE  ....;

KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK





