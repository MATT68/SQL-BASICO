
-- CAST de la media a campo DECIMAL(9,2)

SELECT DEPT, SUM(SALARIO), AVG(SALARIO), CAST(AVG(SALARIO) AS DECIMAL(9,2)) , COUNT(*), COUNT(DISTINCT SALARIO),
       STDDEV(SALARIO), VARIANCE(SALARIO)
 FROM TEMPLA 
 GROUP BY DEPT

-- Subconsula escalar:
SELECT NUEMPL, AUMENTO, (SELECT AVG(AUMENTO) FROM AUMSAL) AS MEDIA
    FROM AUMSAL

-- Empleados con más de un hijo
SELECT NUEMPL, NOMBRE, APELLIDO
 FROM TEMPLA
WHERE NUEMPL IN (
				SELECT NUEMPL
				 FROM HIJOS 
				GROUP BY NUEMPL
				HAVING COUNT(*) > 1 );
				
-- EMPLEADOS CON SALARIO MAYOR 
-- QUE LA MEDIA DEL SALARIO DE ALGUN DEPARTAMENTO.

SELECT NUEMPL, NOMBRE, SALARIO
FROM TEMPLA
 WHERE SALARIO > ANY 
		(SELECT AVG(SALARIO) 
		   FROM TEMPLA
		  GROUP BY DEPT);
 
 Ó LO PODEMOS PONER ASÍ:
 
 SELECT NUEMPL, NOMBRE, SALARIO
FROM TEMPLA
 WHERE SALARIO > 
( SELECT MIN(MEDIA) FROM 
		(SELECT AVG(SALARIO) AS MEDIA
		   FROM TEMPLA
		  GROUP BY DEPT) MIN_MED
		);
		

XXXXXXXXXXXXXXX   SIN INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXX

 CREATE TABLE CLIENTES
 ( CO_CLIENTE  INT      NOT NULL  ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   FOTO	       BLOB 4 M, 
   E_MAIL_CLI  CHAR(40) NOT NULL , 
   NOMBRE_CLI  CHAR(20) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   FX_ALTA     DATE     NOT NULL ,
   DS_HISTORIAL CLOB 2 M     )
 IN EGDADSIL;

 
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;

CREATE UNIQUE INDEX IX1_CLIENTES CLUSTER 
    ON CLIENTES(CO_CLIENTE ASC);

CREATE UNIQUE INDEX IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI);
 
CREATE INDEX IX2_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX3_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);

 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,     
    FX_PEDIDO   DATE NOT NULL,
    NU_CLIENTE ....
    ....
    IM_PEDIDO   DECIMAL(9,2) NOT NULL   
 );

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON PEDIDOS(NU_PEDIDO);

 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 ALTER TABLE CLIENTES
  ADD PRIMARY KEY NU_CLIENTE ;
-- SQL...W EL INDICE IX1_CLIENTES SERÁ USADO PARA LA PK.

 CREATE UNIQUE INDEX IX_PEDIDOS1
   ON LINEAS_PEDIDOS(NU_PEDIDO, NU_LINEA);

 ALTER TABLE PEDIDOS
  ADD FOREIGN KEY NU_CLIENTE
  REFERENCES CLIENTES(NU_CLIENTE);

 CREATE SEQUENCE SEQ_CLIENTES;


    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 
           
     SET v_num_cliente = :SEQ_CLIENTES.PREVVAL;
   
XXXXXXXXXX  CON INTEGRIDAD REFERENCIAL XXXXXXXXXXXXXXXXXXXXXX


 CREATE TABLE CLIENTES
 ( NU_CLIENTE  INT      NOT NULL ... AUTONUM ... ,
   NIF         CHAR(15) NOT NULL WITH DEFAULT 'XXXXXXXX',
   NOMBRE_CLI  CHAR(60) NOT NULL , 
   APELLIDO1   CHAR(20) NOT NULL ,
   APELLIDO2   CHAR(20),
   FX_ALTA     DATE     NOT NULL WITH DEFAULT SYSDATE,
   FX_BAJA     DATE,
   SEXO        CHAR(1)  ,
   E_MAIL_CLIE CHAR(20) NOT NULL,
   CONSTRAINT PK_CLIE
   PRIMARY KEY NU_CLIENTE,
   CONSTRAINT UNIQUE_EMAIL
   UNIQUE(E_MAIL_CLIE)
)
 IN EGDADSIL;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE CLIENTES TO
   .....;
-- CREATE UNIQUE INDEX IX1_CLIENTES 
    ON CLIENTES(NU_CLIENTE ASC);

-- CREATE UNIQUE INDEX  IX2_CLIENTES 
    ON CLIENTES (E_MAIL_CLI DESC);
 
CREATE INDEX IX3_CLIENTES
   ON CLIENTES (NIF);

CREATE INDEX IX4_CLIENTES
    ON CLIENTES (APELLIDO1, APELLIDO2, NOMBRE_CLI);


 CREATE TABLE PEDIDOS
 (  NU_PEDIDO   INT NOT NULL,   
    FX_PEDIDO   ...
    CO_CLIENTE  INT   ,
   ...,      
       CONSTRAINT FK_CLIE_PEDI       
       FOREIGN KEY CO_CLIENTE
       REFERENCES CLIENTES (NU_CLIENTE)
     [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       CONTRAINT PK_PEDIDO 
       PRIMARY KEY NU_PEDIDO
 );



 
 CREATE INDEX IX_PEDIDOS2
   ON PEDIDOS(NU_CLIENTE);

 CREATE TABLE LINEAS_PEDIDO
 (  NU_PEDIDO   INT NOT NULL,
    NU_LINEA    INT NOT NULL,
    CO_PRODUCTO CHAR(8) NOT NULL, 
      ...
      ...,   
       CONSTRAINT FK_PEDI_LPED
       FOREIGN KEY NU_PEDIDO
       REFERENCES PEDIDOS
      [ON DELETE CASCADE],     <----------------- !!!!
       CONSTRAINT FK_PROD_LPED
       FOREIGN KEY CO_PRODUCTO
       REFERENCES PRODUCTOS
      [ON DELETE RESTRICT [CASCADE] [SET NULL] ],
       PRIMARY KEY (NU_PEDIDO, NU_LINEA)
 );

 CREATE TABLE DEVOLUCIONES
 (CO_DEVOLUCION    CHAR(12) NOT NULL,
  ....
  ....
  FOREING KEY (NU_PEDIDO, NU_LINEA) 
  REFERENCES LINEAS_PEDIDO 
  );

 CREATE TABLE X
 (  ... INT NOT NULL     
    ... 
   E_MAIL_CLI CHAR(50) ....
   ...,
   FOREIGN KEY E_MAIL_CLI
     REFERENCES CLIENTES (E_MAIL_CLI)
     ...
  )

  CREATE SEQUENCE SEC_PEDIDO
      START WITH 100000
      INCREMENT BY 5
      ...;



 CREATE SEQUENCE SEQ_CLIENTES;

    insert into clientes (NU_CLIENTE, ....., ....)
     values (SEQ_CLIENTES.NEXTVAL, ....., ....); 

   VBLE_ULTIMO_CLIENTE = VALUES(SEQ_CLIENTES.PREVVAL);
 
           
insert pedidos_test
 (select .... from pedidos where .....);

select .... from final_table
 (insert pedidos ....) 


  SELECT A,B,C,D
   FROM TABLA1
  UNION [ALL] / INTERSECT / MINUS-EXCEPT
  SELECT H,J,K,L
   FROM TABLA2;

 TIPOS DE DATOS
 --------------------------------------------
  (S  - Standard Funciona en todos los gestores
   O  - Oracle)

    ALFANUMÉRICOS:
      TIPO            LIMITE
     XXXXXXXXXXXXX   XXXXXXXXXXXX 
S     CHAR            255
S     VARCHAR         32KB / 64 KB.
O     VARCHAR2        4 KB.

   NUMÉRICOS
S    INT       (integer - 4 bytes)
S    SMALLINT  (integer - 2 bytes) 
S    DECIMAL(11,2)   (11 digitos numéricos de los cuales dos son decimales)
O    NUMBER(11,2)    (lo mismo pero en Oracle)     
M    NUMERIC(11,2)   (lo mismo pero en MySQL)

   FECHA-HORA-TIMESTAMP

      TIPO        CONTENIDO
    XXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX
S    DATE       YYYY-MM-DD
S    TIME       HH.MM.SS
O    DATE       YYYY-MM-DD-HH.MM.SS
M    DATETIME   YYYY-MM-DD-HH.MM.SS
S    TIMESTAMP  YYYY-MM-DD-HH.MM.SS.MMMMMM


SELECT CLIENTE, NOMBRE,APELLIDO, TIPO
FROM CLIENTES
GROUP BY ...
HAVING  AVG(IM_GASTO) > 150;

--

 SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR
  WHERE FX_CONTRAT BETWEEN '01-09-2001' AND '31-12-2001'
     AND NIF >= '15000000A'


   WHERE FX_CONTRAT >= '01-09-2001' AND
         FX_CONTRAT <= '31-12-2001'

SELECT CLIENTE, NOMBRE,
APELLIDO, TIPO
FROM CLIENTES
WHERE TIPO = 'A3'
   OR TIPO = 'A4'
   OR TIPO = 'B1';

 --- SUBCONSULTAS    --------------------

  --- SUBCONSULTAS   NO CORRELACIONADAS --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR
  WHERE COMISION >  ( SELECT AVG(SALARIO)  
                       FROM  VENDEDOR );
 

  --- SUBCONSULTAS   CORRELACIONADAS --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO
  FROM VENDEDOR V
  WHERE COMISION >  ( SELECT AVG(SALARIO)  
                       FROM  VENDEDOR 
                       WHERE COM_AUTONOMA = V.COM_AUTONOMA );

  --- SUBCONSULTAS   ESCALARES --------------------

  SELECT VENDEDOR, NOMBRE, APELLIDO, ( SELECT AVG(SALARIO)  
                                       FROM  VENDEDOR  ) SAL_MEDIO
  FROM VENDEDOR V
  WHERE .... ;


  --- QUERY ANIDADA OR NESTED QUERIES  --------------------

  SELECT APELLIDO, COUNT(*)
  FROM ( 
      SELECT  NOMBRE,  APELLIDO, TLF_MV , E_MAIL
      FROM VENDEDOR
          UNION  
      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM CLIENTE
       ) TAB_NUEVA 
  GROUP BY TAB_NUEVA.APELLIDO  ;

  
  --  AQR :  Automatic Query Rewrite

  -- FULLSELECT con los MULTISET OPERATORs

      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM VENDEDOR
    UNION  [ALL] /  MINUS-EXCEPT / INTERSECT
      SELECT  NOMBRE, APELLIDO, TLF_MV , E_MAIL
      FROM CLIENTE
    ORDER BY APELLIDO, NOMBRE ;  



